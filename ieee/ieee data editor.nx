'REV29

'=============================================================DOCU

'FILES
'5 = FILE NUMBER OF THE LAST SAVED TOC
'6,8 = THE OLD OR THE NEW TOC TABLE-OF-CONTENT
'      STORE THE OFFSET OF THE RECORD DATA IN THE NEXT FILE
'      RELATIVE TO THE ROM ADDRESS USING 2 BYTES
'7,9 = THE OLD OR THE NEW DAT RECORDS-DATA
'      STORE THE RECORDS DATA

'TOC FILE
'255 RECORD INDEX
'2 BYTES = OFFSET FROM DAT ROM/FILE TO THE RECORD

'DAT FILE
'255 RECORD DATA
'THE RECORD ID IS ENCODED IN THE RECORD INDEX
'THE RECORD 0 IS NOT USED
'THE ID/INDEX DETERMINE THE TYPE OF THE RECORD
'STR = LABEL
'... = ANY TYPE-SPECIFIC RECORD DATA

'TYPES
'TAG = HAVE SPECIAL MEANING FOR THE GAME ENGINE, NO USER DATA
'FLA = HAVE A SINGLE INCREMENTAL NUMBER IN THE USER DATA
'PLA = CAN HAVE ARBITRARY USER DATA
'ACT = HAVE LOT OF STATIC DATA
'RES = A GAUGE, A VALUE AND A MAX IN THE USER DATA
'BOT = HAVE A STATUS IN THE USER DATA

'ID TYPE MAPPING
'000 = NOT USED
'001..030 = 30X TAGS
'031..090 = 60X FLAGS
'091..110 = 20X PLACES
'111..170 = 60X ACTIONS
'171..190 = 20X RESOURCES
'191..210 = 20X MODELS

'TAG RECORD DATA
'NO GAME DATA

'FLAG RECORD DATA
'NO GAME DATA

'PLACE RECORD DATA
'TBD...

'ACTION RECORDS DATA
'BYTE = ACTION FUNCTION
'BYTE = NUMBER OF BEFORE PARAMS
'... = BEFORE PARAM DATA
'      BYTE = RECORD ID/INDEX
'      BYTE = PARAM FUNCTION
'BYTE = NUMBER OF AFTER PARAMS
'       BYTE = RECORD ID/INDEX
'       BYTE = PARAM FUNCTION

'RESOURCE RECORDS DATA
'NOTHING MORE

'MODELS RECORDS DATA
'TBD...

'ACTION FUNCTIONS
'000 = NOT USED
'001 = MULTI: CAN ADD DRONE, CAN PARALLELIZE

'PARAM FUNCTIONS
'000 = NOT USED
'001 = +1: ALWAYS +1
'002 = -1: ALWAYS -1
'003 = +1M: MULTI * +1
'004 = -1M: MULTI * -1
'005 = +2M: MULTI * +2
'006 = -2M: MULTI * -2
'007 = STO: HARD CODED STORY MODE
'008 = USE1: LOCK&FREE * -1
'009 = USE2: LOCK&FREE * -2
'010 = USE3: LOCK$FREE * -3

'============================================================= VAR

'RECORDS ENUM TYPE
GLOBAL TAG,FLA,PLA,ACT,RES,BOT
TAG=1
FLA=2
PLA=3
ACT=4
RES=5
BOT=6

'ARRAYFIELD:
GLOBAL RECLBL,REFID
RECLBL=0
REFID=0
GLOBAL ACTFUNC,ACTCOST,ACTGAIN
ACTFUNC=0
ACTCOST=1
ACTGAIN=2
GLOBAL COSTREF,COSTFUNC
COSTREF=0
COSTFUNC=1

'ACTIONFUNC:
GLOBAL AFUNCOST
AFUNCOST=3
DIM GLOBAL ACTIONFUNC$(2,1)
'(,0) SHORT
'(,1) DESC
RESTORE ACTIONFUNCLIST
FOR I=0 TO AFUNCOST-1
READ ACTIONFUNC$(I,0),ACTIONFUNC$(I,1)
NEXT I
ACTIONFUNCLIST:
DATA "NIL","NOT USED"
DATA "MULTI","ADD,PARALLELIZE"
DATA "ONE","ALWAYS ONE"

'COSTFUNC:
GLOBAL COSTCOUNT
COSTCOUNT=11
DIM GLOBAL COSTFUNC$(10,1)
'(,0) SHORT
'(,1) DESC
RESTORE COSTFUNCLIST
FOR I=0 TO COSTCOUNT-1
READ COSTFUNC$(I,0),COSTFUNC$(I,1)
NEXT I
COSTFUNCLIST:
DATA "NIL","NOT USED"
DATA "+1","ALWAYS +1"
DATA "-1","ALWAYS -1"
DATA "+1M","MISSION * +1"
DATA "-1M","MISSION * -1"
DATA "+2M","MISSION * +2"
DATA "-2M","MISSION * -2"
DATA "STO","STORY-ORDER BIOME"
DATA "U1","USE LOCK 1"
DATA "U2","USE LOCK 2"
DATA "U3","USE LOCK 3"

'DETERMINE THE FILES USED FOR THE OLD AND THE NEW REVISION
GLOBAL OLDTOC,OLDDAT,NEWDAT,NEWTOC
OLDTOC=6
OLDDAT=7
NEWTOC=8
NEWDAT=9
LOAD 5,$A000
IF PEEK($A000)=8 THEN
SWAP OLDTOC,NEWTOC
SWAP OLDDAT,NEWDAT
END IF

'THE CURRENT EDITED RECORD
GLOBAL RECINDEX
RECINDEX=0

'STORE THE OFFSET FOR RECORDS
DIM GLOBAL RECOFFSET(255)

'STORE THE NUMERIC VALUE FOR RECORDS
'(,0) = ACT FUNC
'(,1) = ACT COST COUNT
'(,2) = ACT GAIN COUNT
DIM GLOBAL RECNUM(255,3)

'STORE THE STRING FOR RECORDS
'(,0) = LABEL
DIM GLOBAL RECSTR$(255,0)

'STORE THE 7 COST DATA RECORDS
'WITH A MAXIMUM OF 7 COST
'(,,0) = REFERENCE ID
'(,,1) = FUNCTION
DIM GLOBAL RECCOST(255,6,1)

'STORE THE 7 GAIN DATA RECORDS
'WITH A MAXIMUM OF 7 GAIN
'(,,0) = REFERENCE ID
'(,,1) = FUNCTION
DIM GLOBAL RECGAIN(255,6,1)

'CX,CY = CELL2 TOUCH COORDS
GLOBAL CX,CY
'UX,UY = CELL3 USER FREINDLY TOUCH COORDS
GLOBAL UX,UY
'UT = TIMER TO REPEAT THE TAP ACTION
GLOBAL UT
UT=0

'MSG$ = MESSAGE TO USER
'PMSG$ = PREVIOUS MESSAGE
GLOBAL MSG$,MTIME,MPOS,PMSG$
MSG$=""
PMSG$=""

'=============================================================MAIN

TOUCHSCREEN
FILES
CALL LOADRECORDS
CALL PAGERECORD

'=============================================================PAGE

SUB PAGEFILE
DO
CLS
CALL UPDTOUCH
ATTR 0
TEXT 0,0,"SA LO SW BA"
TEXT 0,1,"VE AD AP CK"
CALL SHOWMSG
IF UX=0 AND UY=0 THEN CALL SAVERECORDS
IF UX=1 AND UY=0 THEN CALL LOADRECORDS
IF UX=2 AND UY=0 THEN MSG$="NOT IMPLEMENTED"
IF UX=3 AND UY=0 THEN EXIT SUB
WAIT VBL
LOOP
END SUB

SUB PAGERECORD
'T = RECORD TYPE
'T$ = RECORD TYPE AS A STRING
'TX = CELL3 COORD
DO
CLS
CALL UPDTOUCH
T=0
T$=""
CALL WHICHTYPE(RECINDEX,T,T$)
ATTR 0
TEXT 0,0,"PR NE ED       FI FI"
TEXT 0,1,"EV XT IT       ND LE"
ATTR 2
TEXT 9,0,T$
ATTR 1
NUMBER 9,1,RECINDEX,3
CALL SHOWMSG
IF T>0 THEN CALL WIDGETSTR(0,3,RECLBL,"LABEL")
IF UX=0 AND UY=0 THEN DEC RECINDEX
IF UX=1 AND UY=0 THEN INC RECINDEX
IF UX=2 AND UY=0 THEN
CLS
ATTR 0
TEXT 9,0,"###"
V$=""
ATTR 1
CALL WIDGETINPUT(9,1,V$,2)
RECINDEX=VAL(V$)
END IF
IF UX=5 AND UY=0 THEN
D=0
WAIT VBL
CALL PAGEREF(RECINDEX,T,T$)
END IF
CALL CLAMP(RECINDEX,0,255)
IF UX=6 AND UY=0 THEN
WAIT VBL
CALL PAGEFILE
END IF
IF T=ACT THEN
CALL WIDGETLST(0,6,RECNUM(RECINDEX,ACTFUNC),"FUNC",AFUNCOST,ACTIONFUNC$())
CALL WIDGETCOST(10,6,ACTCOST,"BEFORE",RECCOST(),7,COSTCOUNT,COSTFUNC$())
CALL WIDGETCOST(0,9,ACTGAIN,"AFTER",RECGAIN(),7,COSTCOUNT,COSTFUNC$())
END IF
WAIT VBL
LOOP
END SUB

SUB PAGELST(F$,A,A$(),V,V$)
'F$ = FIELD LABEL
'A = ARRAY SIZE
'A$() = ARRAY OF ENTRIES
'V = INDEX OF THE ENTRY IN THE ARRAY
'V$ = THE VALUE AS A STRING AS AN ARRAY ENTRY
'S = STARTING INDEX FROM THE ARRAY
'E = ENDING INDEX FROM THE ARRAY
S=0
DO
CLS
CALL UPDTOUCH
ATTR 0
TEXT 0,0,"PR NE"
TEXT 0,1,"EV XT"
CALL BACKBTN(6,0,F$,V$)
IF UX=0 AND UY=0 AND S>3 THEN S=S-4
IF UX=1 AND UY=0 AND S<A-3 THEN S=S+4
IF UX=2 AND UY=0 THEN 
WAIT VBL 
EXIT SUB
END IF
E=S+3
CALL CLAMP(E,S,A-1)
FOR I=S TO E
Y=(I-S)*3+3
ATTR 0
TEXT 0,Y,"SE"
TEXT 0,Y+1,"LE"
ATTR 1
TEXT 3,Y,A$(I,0)
ATTR 3
TEXT 3,Y+1,A$(I,1)
IF UX=0 AND CY>=Y AND CY<=Y+1 THEN
V=UY-1+S
WAIT VBL
EXIT SUB
END IF
NEXT I
WAIT VBL
LOOP
END SUB

SUB PAGEREF(D,T,T$)
'D = INDEX OF THE ID FOUND
'T = RECORD TYPE
'T$ = RECORD TYPE AS A STRING
'S = STARTING INDEX
'E = ENDING INDEX
'V$ = THE SEARCH TERM
'F = HOW MANY FOUND
S=1
F=0
V$=""
PAGEREFREDO:
CLS
ATTR 0
TEXT 0,0,"PR NE BA"
TEXT 0,1,"EV XT CK"
ATTR 3
CALL EDITBTN(9,0,"SEARCH",V$)
CALL FILLSEARCH(S,V$,F)
DO
CALL UPDTOUCH
IF UX=0 AND UY=0 AND S>3 THEN S=S-4
IF UX=1 AND UY=0 AND S<251 AND F=4 THEN S=S+4
IF UX=2 AND UY=0 THEN
WAIT VBL
EXIT SUB
END IF
IF UX=3 AND UY=0 THEN CALL WIDGETINPUT(12,1,V$,LEN(V$))
IF UY=0 THEN GOTO PAGEREFREDO
IF UX=0 AND UY>0 AND UY-1<F THEN
CALL FIRSTSEARCH(S,V$,D,UY-1)
WAIT VBL
EXIT SUB
END IF
WAIT VBL
LOOP
END SUB

SUB PAGECOST(F,F$,R(),M,A,A$())
'F = FIELD INDEX
'F$ = FIELD LABEL
'R() = TARGET ARRAY
'M = ENTRIES MAX
'C = ARRAY COUNT
'I = INDEX OF ARRAY ENTRY
'C = ARRAY COUNT
'TX = CELL3 COORD
'A = ARRAY SIZE
'A$() = ARRAY OF ENTRIES
I=0
C=0
TX=-1
DO
CLS
CALL UPDTOUCH
CALL WIDGETIDX(F,I,C,TX,M)
IF UX=3 THEN
WAIT VBL
EXIT SUB
END IF
IF C>0 THEN
CALL WIDGETREF(0,3,I,R())
CALL WIDGETLST(0,6,R(RECINDEX,I,COSTFUNC),"FUNC",A,A$())
END IF
WAIT VBL
LOOP
END SUB

'===========================================================WIDGET

SUB WIDGETREF(X,Y,I,R())
'I = INDEX OF ARRAY ENTRY
'R() = TARGET ARRAY
T=0
T$=""
ATTR 0
TEXT X,Y,"ED"
TEXT X,Y+1,"IT"
CALL WIDGETID(X+3,Y,R(RECINDEX,I,COSTREF),T,T$)
IF TAP AND CX>=X AND CX<=X+1 AND CY>=Y AND CY<=Y+1 THEN
D=0
WAIT VBL
CALL PAGEREF(R(RECINDEX,I,COSTREF),T,T$)
END IF
END SUB

SUB WIDGETIDX(F,I,C,TX,M)
'F = FIELD INDEX
'I = INDEX OF ARRAY ENTRY
'C = ARRAY COUNT
'TX = CELL3 COORD
'M = ENTRIES MAX
TX=-1
ATTR 0
TEXT 0,0,"PR NE ## BA"
TEXT 0,1,"EV XT    CK"
CALL WIDGETNUM(12,0,F,"COUNT")
CALL CLAMP(RECNUM(RECINDEX,F),0,M)
C=RECNUM(RECINDEX,F)
CALL CLAMP(I,0,C-1)
IF C>0 THEN
ATTR 1
NUMBER 6,1,I,2
END IF
IF UX=0 AND UY=0 THEN DEC I
IF UX=1 AND UY=0 THEN INC I
IF UX=3 AND UY=0 THEN
WAIT VBL
EXIT SUB
END IF
IF UX=2 AND UY=0 THEN
CLS
ATTR 0
TEXT 6,0,"##"
V$=""
ATTR 1
CALL WIDGETINPUT(6,1,V$,2)
I=VAL(V$)
END IF
CALL CLAMP(I,0,C-1)
END SUB

SUB WIDGETCOST(X,Y,F,F$,R(),M,A,A$())
'X,Y = WIDGET CELL COORDS
'F = FIELD INDEX
'F$ = FIELD LABEL
'R() = TARGET ARRAY
'V = ARRAY COUNT
'M = ENTRIES MAX
'A = ARRAY SIZE
'A$() = ARRAY OF ENTRIES
V=RECNUM(RECINDEX,F)
ATTR 1
CALL EDITBTN(X,Y,F$,STR$(V))
IF TAP AND CX>=X AND CX<=X+1 AND CY>=Y AND CY<=Y+1 THEN
WAIT VBL
CALL PAGECOST(F,F$,R(),M,A,A$())
END IF
END SUB

SUB WIDGETLST(X,Y,V,F$,A,A$())
'X,Y = WIDGET CELL COORDS
'F$ = FIELD LABEL
'A = ARRAY SIZE
'A$() = ARRAY OF ENTRIES
'V = INDEX OF THE ENTRY IN THE ARRAY
'V$ = THE VALUE AS A STRING AS AN ARRAY ENTRY
CALL CLAMP(V,0,A-1)
V$=A$(V,0)
ATTR 1
CALL EDITBTN(X,Y,F$,V$)
IF TAP AND CX>=X AND CX<=X+1 AND CY>=Y AND CY<=Y+1 THEN
WAIT VBL
CALL PAGELST(F$,A,A$(),V,V$)
END IF
END SUB

SUB WIDGETINPUT(X,Y,V$,L)
'X,Y = WIDGET CELL COORDS
'V$ = VALUE READ
'L = LENGTH OF THE PREVIOUS VALUE TO ERASE
FOR XX=X TO X+L-1
CELL XX,Y,0
NEXT XX
LOCATE X,Y
CALL WAITINPUT(V$)
END SUB

SUB WIDGETNUM(X,Y,F,F$)
'X,Y = WIDGET CELL COORDS
'F = FIELD INDEX
'F$ = FIELD LABEL
'V$ = THE VALUE AS A STRING
'R = ROW EDEN OR ODD
V$=STR$(RECNUM(RECINDEX,F))
ATTR 1
CALL EDITBTN(X,Y,F$,V$)
IF TAP AND CX>=X AND CX<=X+1 AND CY>=Y AND CY<=Y+1 THEN
CLS 
ATTR 0
TEXT X+3,Y,F$
ATTR 1
CALL WIDGETINPUT(X+3,Y+1,V$,LEN(V$))
IF V$<>"" THEN RECNUM(RECINDEX,F)=VAL(V$)
END IF
END SUB

SUB WIDGETSTR(X,Y,F,F$)
'X,Y = WIDGET CELL COORDS
'F = FIELD INDEX
'F$ = FIELD LABEL
'V$ = THE VALUE AS A STRING
V$=RECSTR$(RECINDEX,F)
ATTR 3
CALL EDITBTN(X,Y,F$,V$)
IF TAP AND CX>=X AND CX<=X+1 AND CY>=Y AND CY<=Y+1 THEN
CLS 
ATTR 0
TEXT X+3,Y,F$
ATTR 3
CALL WIDGETINPUT(X+3,Y+1,V$,LEN(V$))
IF V$<>"" THEN RECSTR$(RECINDEX,F)=V$
END IF
END SUB

SUB WIDGETBYTE(X,Y,F,F$)
'X,Y = WIDGET CELL COORDS
'F = FIELD INDEX
'F$ = FIELD LABEL
CALL WIDGETNUM(X,Y,F,F$)
CALL CLAMP(RECNUM(RECINDEX,F),0,255)
END SUB

SUB WIDGETID(X,Y,I,T,T$)
'X,Y = WIDGET CELL COORDS
'I = RECORD INDEX
'T = RECORD TYPE
'T$ = RECORD TYPE AS A STRING
T=0
T$=""
CALL WHICHTYPE(I,T,T$)
V$=RECSTR$(I,RECLBL)
IF T>0 THEN
ATTR 1
NUMBER X,Y,I,3
ATTR 2
TEXT X+4,Y,T$
ATTR 3
TEXT X,Y+1,V$
END IF
END SUB

SUB EDITBTN(X,Y,F$,V$)
TEXT X+3,Y+1,V$
ATTR 0
TEXT X,Y,"ED "+F$
TEXT X,Y+1,"IT"
END SUB

SUB BACKBTN(X,Y,F$,V$)
ATTR 0
TEXT X,Y,"BA "+F$
TEXT X,Y+1,"CK"
ATTR 1
TEXT X+3,Y+1,V$
END SUB

SUB FILLSEARCH(S,V$,F)
F=0
T=0
T$=""
FOR I=S TO 255
IF (V$="" OR INSTR(RECSTR$(I,RECLBL),V$)>0) AND F<4 THEN
Y=F*3+3
CALL WIDGETID(3,Y,I,T,T$)
IF T>0 THEN
ATTR 0
TEXT 0,Y,"SE"
TEXT 0,Y+1,"LE"
INC F
END IF
IF F=4 THEN 
WAIT VBL
EXIT SUB
END IF
END IF
NEXT I
END SUB

SUB FIRSTSEARCH(S,V$,I,R)
T=0
T$=""
FOR I=S TO 255
IF (V$="" OR INSTR(RECSTR$(I,RECLBL),V$)>0) THEN
CALL WHICHTYPE(I,T,T$)
IF T>0 THEN
DEC R
IF R<0 THEN
WAIT VBL
EXIT SUB
END IF
END IF
END IF
NEXT I
END SUB

'============================================================ FILE

SUB LOADRECORDS
'O = ADDRESS OFFSET (RECORD+FIELD)
'D = RECORD ID AND TYPE
'I = RECORD INDEX
'J = RECORD COST INDEX
'T = RECORD TYPE
'T$ = RECORD TYPE AS STRING
CLS
LOAD OLDTOC,$A000
FOR I=0 TO 255
RECOFFSET(I)=PEEKW($A000+I*2)
NEXT I
LOAD OLDDAT,$A000
FOR I=0 TO 255
O=RECOFFSET(I)
T=0
T$=""
CALL WHICHTYPE(I,T,T$)
IF I>0 THEN CALL PEEKSTR(O,I,RECLBL)
IF T=ACT THEN
CALL PEEKBYTE(O,RECNUM(I,ACTFUNC))
CALL PEEKBYTE(O,RECNUM(I,ACTCOST))
FOR J=0 TO MIN(7,RECNUM(I,ACTCOST))-1
CALL PEEKBYTE(O,RECCOST(I,J,0))
CALL PEEKBYTE(O,RECCOST(I,J,1))
NEXT J
CALL PEEKBYTE(O,RECNUM(I,ACTGAIN))
FOR J=0 TO MIN(7,RECNUM(I,ACTGAIN))-1
CALL PEEKBYTE(O,RECGAIN(I,J,0))
CALL PEEKBYTE(O,RECGAIN(I,J,1))
NEXT J
END IF
NEXT I
MSG$="RECORDS LOADED"
END SUB

SUB SAVERECORDS
'O = ADDRESS OFFSET (RECORD+FIELD)
'T = RECORD TYPE
'T$ = RECORD TYPE AS STRING
'I = RECORD INDEX
'J = RECORD COST INDEX
CLS
O=2
POKE $A000,0
POKE $A001,0
FOR I=0 TO 255
RECOFFSET(I)=0
T=0
T$=""
CALL WHICHTYPE(I,T,T$)
IF T>0 THEN
RECOFFSET(I)=O
CALL POKESTR(O,I,RECLBL)
END IF
IF T=ACT THEN
CALL POKEBYTE(O,RECNUM(I,ACTFUNC))
CALL POKEBYTE(O,RECNUM(I,ACTCOST))
FOR J=0 TO RECNUM(I,ACTCOST)-1
CALL POKEBYTE(O,RECCOST(I,J,0))
CALL POKEBYTE(O,RECCOST(I,J,1))
NEXT J
CALL POKEBYTE(O,RECNUM(I,ACTGAIN))
FOR J=0 TO RECNUM(I,ACTGAIN)-1
CALL POKEBYTE(O,RECGAIN(I,J,0))
CALL POKEBYTE(O,RECGAIN(I,J,1))
NEXT J
END IF
NEXT I
SAVE NEWDAT,"NEW RECORDS DAT",$A000,O
FOR I=0 TO 255
POKEW $A000+I*2,RECOFFSET(I)
NEXT I
SAVE NEWTOC,"NEW RECORDS TOC",$A000,256*2
IF FSIZE(OLDDAT) THEN
LOAD OLDDAT,$A000
SAVE OLDDAT,"OLD RECORDS DAT",$A000,FSIZE(OLDDAT)
END IF
IF FSIZE(OLDTOC) THEN
LOAD OLDTOC,$A000
SAVE OLDTOC,"OLD RECORDS TOC",$A000,FSIZE(OLDTOC)
END IF
POKE $A000,NEWTOC
SAVE 5,"RECORDS FILE",$A000,1
MSG$="RECORDS SAVED"
END SUB

SUB POKESTR(O,I,F)
'O = RECORD+FIELD OFFSET
'I = RECORD INDEX
'F = FIELD ID
L=MIN(255,LEN(RECSTR$(I,F)))
POKE $A000+O,L
INC O
FOR J=1 TO L
POKE $A000+O,ASC(MID$(RECSTR$(I,F),J,1))
INC O
NEXT J
END SUB
SUB PEEKSTR(O,I,F)
L=PEEK($A000+O)
RECSTR$(I,F)=""
INC O
FOR J=1 TO L
RECSTR$(I,F)=RECSTR$(I,F)+CHR$(PEEK($A000+O))
INC O
NEXT J
END SUB
SUB POKEBYTE(O,V)
POKE $A000+O,V
INC O
END SUB
SUB PEEKBYTE(O,V)
V=PEEK($A000+O)
INC O
END SUB

'============================================================ UTIL

SUB WHICHTYPE(D,T,T$)
T=0
T$="NIL"
IF D>210 THEN
ELSE IF D>190 THEN
T=BOT
T$="BOT"
ELSE IF D>170 THEN
T=RES
T$="RES"
ELSE IF D>110 THEN
T=ACT
T$="ACT"
ELSE IF D>90 THEN
T=PLA
T$="PLA"
ELSE IF D>30 THEN
T=FLA
T$="FLA"
ELSE IF D>0 THEN
T=TAG
T$="TAG"
END IF
END SUB

SUB UPDTOUCH
CX=TOUCH.X\8
CY=TOUCH.Y\8
UX=-1
UY=-1
IF UT>0 THEN DEC UT
IF UT<0 THEN INC UT
IF TAP THEN UT=25
IF (TAP AND (CX MOD 3)<2 AND (CY MOD 3)<2) OR (TOUCH AND UT=0) THEN
UX=CX\3
UY=CY\3
IF NOT TAP THEN UT=-5
END IF
END SUB

SUB WAITINPUT(V$)
KEYBOARD ON
INPUT V$
KEYBOARD OFF
END SUB

SUB CLAMP(V,I,A)
V=MAX(I,MIN(A,V))
END SUB

SUB SHOWMSG
IF MSG$="" THEN
EXIT SUB
ELSE IF MSG$<>PMSG$ THEN
MPOS=0
MTIME=40+LEN(MSG$)*2
PMSG$=MSG$
ELSE IF MTIME>0 AND MPOS<LEN(MSG$) THEN
INC MPOS
ELSE IF MTIME>0 THEN
DEC MTIME
ELSE IF MPOS>0 THEN
DEC MPOS
ELSE IF MPOS=0 THEN
MSG$=""
PMSG$=""
EXIT SUB
END IF
ATTR 4
TEXT 0,15,RIGHT$(MSG$,MPOS)
END SUB

#1:MAIN PALETTES
003F2A15002F1B02003E2914003A3420
00353010003F2A15003F2A15003F2A15

